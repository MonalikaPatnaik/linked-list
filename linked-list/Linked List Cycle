Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Code:

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(!head)return 0;
        ListNode *slow=head;
        ListNode *fast=head->next;
        while(fast && fast->next){
            if(slow==fast)return 1; // slow and fast pointers can be compared if they are pointing to the same node or not!!
            // we don't compare the data of slow and fast pointers becoz duplicate elements can also exist having no cycle and it will return true 
            
            slow=slow->next;
            fast=fast->next->next;
        }
        return 0;
    }
};
